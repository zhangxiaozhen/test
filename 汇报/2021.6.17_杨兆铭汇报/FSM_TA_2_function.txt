(set-option :print-success false)
(set-option :produce-models true)
(set-option :produce-proofs true)
(set-logic QF_UFLIA)

;;;step variable information,
;arguments represent time step
(declare-fun ST_TL (Int) Int)
(declare-fun ST_AL (Int) Int)
(declare-fun count (Int) Int)
(declare-fun Sec (Int) Int)
(declare-fun Theat (Int) Int)
(declare-fun Tkeep (Int) Int)
(declare-fun Pgo (Int) Int)
(declare-fun Pstop (Int) Int)
(declare-fun Ago (Int) Int)
(declare-fun Astop (Int) Int)




;;;variable domain
(define-fun VarDomain ((i Int)) Bool (and (or (= (ST_TL i) 0) (= (ST_TL i) 1) (= (ST_TL i) 2)) (or (= (ST_AL i) 0) (= (ST_AL i) 1) (= (ST_AL i) 2)) (or (= (Theat i) 0) (= (Theat i) 1) (= (Theat i) -1)) (or (= (Tkeep i) 0) (= (Tkeep i) 1) (= (Tkeep i) -1)) (or (= (Pgo i) 0) (= (Pgo i) 1) (= (Pgo i) -1)) (or (= (Pstop i) 0) (= (Pstop i) 1) (= (Pstop i) -1)) (or (= (Ago i) 0) (= (Ago i) 1) (= (Ago i) -1)) (or (= (Astop i) 0) (= (Astop i) 1) (= (Astop i) -1)) ))




;;;initial states predicate
(define-fun I0 () Bool (and (= (ST_TL 0) 0) (= (ST_AL 0) 0) (= (count 0) 0) (= (Sec 0) -1) (= (Theat 0) -1) (= (Tkeep 0) -1) (= (Pgo 0) -1) (= (Pstop 0) -1) (= (Ago 0) -1) (= (Astop 0) -1)))





;;;sub-transitions and corresponding conditions
(define-fun t1 ((i Int)) Bool (and (= (ST_TL (- i 1)) 0) (= (Theat i) 1) (= (Tkeep i) 0) (= (Pgo i) -1) (= (Pstop i) -1) (= (count i) 0) (= (ST_TL i) 1)))
(define-fun Con1 ((i Int)) Bool (= (ST_TL (- i 1)) 0))

(define-fun t2 ((i Int)) Bool (and (= (ST_TL (- i 1)) 1) (not (= (Sec i) -1)) (< (count (- i 1)) 2) (= (Theat i) -1) (= (Tkeep i) -1) (= (Pgo i) -1) (= (Pstop i) -1) (= (count i) (+ (count (- i 1)) 1)) (= (ST_TL i) 1)))
(define-fun Con2 ((i Int)) Bool (and (= (ST_TL (- i 1)) 1) (not (= (Sec i) -1)) (< (count (- i 1)) 2) ) )

(define-fun t3 ((i Int)) Bool (and (= (ST_TL (- i 1)) 1) (not (= (Sec i) -1)) (= (count (- i 1)) 2) (= (Theat i) 0) (= (Tkeep i) 1) (= (Pgo i) 1) (= (Pstop i) -1) (= (ST_TL i) 2)))
(define-fun Con3 ((i Int)) Bool (and (= (ST_TL (- i 1)) 1) (not (= (Sec i) -1)) (= (count (- i 1)) 2))) 

(define-fun t4 ((i Int)) Bool (and (= (ST_TL (- i 1)) 2) (not (= (Sec i) -1)) (= (Theat i) 1) (= (Tkeep i) 0) (= (Pgo i) 0) (= (Pstop i) 1) (= (count i) 0) (= (ST_TL i) 1)))
(define-fun Con4 ((i Int)) Bool (and (= (ST_TL (- i 1)) 2) (not (= (Sec i) -1))))

(define-fun t5 ((i Int)) Bool (and (= (ST_AL (- i 1)) 0) (= (Ago i) 0) (= (Astop i) 1) (= (ST_AL i) 1)))
(define-fun Con5 ((i Int)) Bool (= (ST_AL (- i 1)) 0))

(define-fun t6 ((i Int)) Bool (and (= (ST_AL (- i 1)) 1) (not (= (Pgo i) -1)) (= (Ago i) 1) (= (Astop i) 0) (= (ST_AL i) 2)))
(define-fun Con6 ((i Int)) Bool (and (= (ST_AL (- i 1)) 1) (not (= (Pgo i) -1))))

(define-fun t7 ((i Int)) Bool (and (= (ST_AL (- i 1)) 2) (not (= (Pstop i) -1)) (= (Ago i) 0) (= (Astop i) 1) (= (ST_AL i) 1)))
(define-fun Con7 ((i Int)) Bool (and (= (ST_AL (- i 1)) 2) (not (= (Pstop i) -1))))




;;;transition function
(define-fun T ((i Int)(Val Int)) Bool (and (= (Sec i) Val) (or (or (t1 i) (t2 i) (t3 i) (t4 i)) (and (not (Con1 i)) (not (Con2 i)) (not (Con3 i)) (not (Con4 i)) (= (ST_TL i) (ST_TL (- i 1))) (= (count i) (count (- i 1))) (= (Theat i) -1) (= (Tkeep i) -1) (= (Pgo i) -1) (= (Pstop i) -1))) (or (or (t5 i) (t6 i) (t7 i)) (and (not (Con5 i)) (not (Con6 i)) (not (Con7 i)) (= (ST_AL i) (ST_AL (- i 1))) (= (Ago i) -1) (= (Astop i) -1)))))




;;;property function !(TemperatureLight.state=Theat&ActionLight.state=Agao)
(define-fun f ((i Int)) Bool (not (and (= (ST_TL i) 1) (= (ST_AL i) 2))))




;;;verification
;;;;;;k=7,M ^ not f
;;;(assert(and (and (VarDomain 0) I0) (and (VarDomain 1) (T 1 1)) (and (VarDomain 2) (T 2 2)) (and (VarDomain 3) (T 3 3)) (and (VarDomain 4) (T 4 4)) (and (VarDomain 5) (T 5 5)) (and (VarDomain 6) (T 6 6)) (and (VarDomain 7) (T 7 7)) (or (not (f 1)) (not (f 2)) (not (f 3)) (not (f 4)) (not (f 5)) (not (f 6)) (not (f 7)) ) ))

;;;;;;k=7,M ^ f
(assert (and (and (VarDomain 0) I0) (and (VarDomain 1) (T 1 1)) (and (VarDomain 2) (T 2 2)) (and (VarDomain 3) (T 3 3)) (and (VarDomain 4) (T 4 4)) (and (VarDomain 5) (T 5 5)) (and (VarDomain 6) (T 6 6)) (and (VarDomain 7) (T 7 7)) (and (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7))))



(check-sat)
(get-model)
(exit)